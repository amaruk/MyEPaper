---

# Notes:
# This YAML file is modified and commented based on the default ceedling
# project configuration file.
# 
# Amaruk 2017.02.08

:project:
# TRUE: enable CExcpetion
  :use_exceptions: FALSE
# TRUE: enable CMock
  :use_mock: TRUE
# TRUE: support test files with conditional compilation statements 
# (e.g. #ifdef) and header files to be mocked that contain conditional
# preprocessor statements and/or macros.
  :use_test_preprocessor: TRUE
# TRUE: support incremental build with more than three level include
  :use_deep_dependencies: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
# TRUE: Enable release build
#  :release_build: TRUE
# Test case files' prefix
  :test_file_prefix: test_

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

# Environment variables to be inserted into shell path
# e.g.
#     - :license_server: gizmo.intranet
#     LICENSE_SERVER set with value “gizmo.intranet”
:environment:

# File extensions
# header: .h      C header files
# source: .c      C code files (whether source or test files)
# assembly: .s    Assembly files (contents wholly assembly instructions)
# object: .o      Resulting binary output of C code compiler (and assembler)
# executable: .exe/.out   Binary executable to be loaded and executed
#                         upon target hardware .exe or .out (Win or *nix)
# testpass: .pass   Test results file (not likely to ever need a new value)
# testfail: .fail   Test results file (not likely to ever need a new value)
# dependencies: .d  File containing make-style dependency rules created
#                   by gcc preprocessor
:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - ../src/**
  :support:
    - test/support

# command line defines used in test and release compilation
# by configured tools
:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

# configure CMock's code generation options and
# set symbols used to modify CMock's compiled features.
:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Configure per-file compilation and linking flags
#:flags:
#  :release:
#    :compile:
#      :main: # add '-Wall' to compilation of main.c
#        - -Wall
#      :fan: # add '--O2' to compilation of fan.c
#        - --O2
#      :*: # add '-foo' to compilation of all files not main.c or fan.c
#        - -foo
#  :test:
#    :compile:
#      :main: # add '--O1' to compilation of main.c as part of test builds including main.c
#        - --O1
#    :link:
#      :test_main: # add '--bar --baz' to linking of test_main.exe
#        - --bar
#        - --baz

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
...
